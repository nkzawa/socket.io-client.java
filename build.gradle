/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java-library'
    id 'maven-publish'
}

repositories {
    mavenLocal()
    maven { url 'https://maven.bandyer.com/releases' }

    maven {
        url = uri('https://oss.sonatype.org/content/groups/public/')
    }
    maven {
        url = uri('https://oss.sonatype.org/content/repositories/snapshots')
    }

    maven {
        url = uri('https://repo.maven.apache.org/maven2/')
    }
}

dependencies {
    implementation 'com.bandyer:engine.io-client:2.0.0'
    implementation 'org.json:json:20090211'
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest-library:1.3'
    testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

java.sourceCompatibility = JavaVersion.VERSION_1_7

java {
    withSourcesJar()
    withJavadocJar()
}


def projectGroup = "com.bandyer"
def libVersion = "2.0.1"

Properties properties = new Properties()
if (project.rootProject.file("local.properties").exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

publishing {
    repositories {
        maven {
            url = "s3://maven-bandyer/releases/"
            credentials(AwsCredentials) {
                accessKey = properties.getProperty("maven.accessKey")
                secretKey = properties.getProperty("maven.secretKey")
            }
        }
    }

    publications {
        maven(MavenPublication) {
            from components.java
            groupId = projectGroup
            artifactId = project.getName()
            version = libVersion
        }
    }
}

task invalidateCache(type: Exec) {
    workingDir 'scripts'
    def publishPath = "releases"
    def packageName = projectGroup + "." + project.getName()
    commandLine 'python', './invalidate_s3_cache.py', properties.getProperty("maven.accessKey"), properties.getProperty("maven.secretKey"), properties.getProperty("maven.distributionId"), publishPath, packageName ,libVersion
}

task publishUpload {
    def dryRun = true
    def publishTask = 'publishToMavenLocal'
    if(!dryRun) publishTask = 'publish'
    dependsOn publishTask
    dependsOn 'invalidateCache'
    tasks.findByName('invalidateCache').mustRunAfter publishTask
}


tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
